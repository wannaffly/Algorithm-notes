1. 两数之和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

你可以按任意顺序返回答案。

 

示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
示例 2：

输入：nums = [3,2,4], target = 6
输出：[1,2]
示例 3：

输入：nums = [3,3], target = 6
输出：[0,1]


方法一：暴力解法 时间复杂度O（n²），空间复杂度O（1）

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                s  = nums [i] + nums[j]
                if s == target:
                    return i,j


方法二：切片一层循环
class Solution(object):
    def twoSum(self, nums, target):
        n = len(nums)
        for i in range(1,n):
            temp = nums[:i] #nums前i个数据切片
            if (target - nums[i]) in temp:
                j = temp.index(target - nums[i])
                break
        return [j,i]
		
		
方法三：方法三：排序＋双指针 时间复杂度O（nlogn），空间复杂度O（n）
class Solution:
    def twoSum(self, nums, target):
        temp=nums.copy()
        temp.sort()
        i=0
        j=len(nums)-1
        while i<j:
            if (temp[i]+temp[j])>target:
                j=j-1
            elif (temp[i]+temp[j])<target:
                i=i+1
            else:
                break
        p=nums.index(temp[i])
        nums.pop(p)  #弹出nums[p],这一步是为了防止两个整数相等  
        k=nums.index(temp[j])
        if k>=p:
            k=k+1
        return [p,k]
		
		
方法四：哈希表 时间复杂度O（n），空间复杂度O（n）
class Solution:
    def twoSum(self, nums, target):
        hashset={}
        for i in range(len(nums)):
            if hashset.get(target-nums[i]) is not None :
                return [hashset.get(target-nums[i]),i]
            hashset[nums[i]]=i
			
			
			
			